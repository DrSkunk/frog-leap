{"version":3,"sources":["Frog.js","App.js","serviceWorker.js","index.js"],"names":["Img","styled","img","props","index","Frog","this","type","onClick","src","Component","frogType","Root","div","Board","ResetButton","button","initialBoardState","App","state","board","jump","frogIndex","setState","frog","emptyPlaceIndex","indexOf","newBoard","JSON","parse","stringify","reset","frogs","map","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qaAGA,IAAMA,EAAMC,IAAOC,IAAV,KAGC,SAACC,GAAD,OAAyB,GAAdA,EAAMC,SAKNC,E,uKACT,IAAD,EAC0BC,KAAKH,MAA9BI,EADD,EACCA,KAAMH,EADP,EACOA,MAAOI,EADd,EACcA,QACrB,OAAa,OAATD,EACK,KAEF,kBAACP,EAAD,CAAKS,IAAG,mBAAcF,EAAd,QAA0BH,MAAOA,EAAOI,QAASA,Q,GANlCE,a,+WCPlC,IAAMC,EACG,QADHA,EAEG,QAGHC,EAAOX,IAAOY,IAAV,KAMJC,EAAQb,IAAOC,IAAV,KAMLa,EAAcd,IAAOe,OAAV,KAOXC,EAAoB,CACxBN,EACAA,EACAA,EACA,KACAA,EACAA,EACAA,GAGmBO,E,4MACnBC,MAAQ,CACNC,MAAOH,G,EAGTI,KAAO,SAACC,GACN,EAAKC,UAAS,SAACJ,GACb,IAAMK,EAAOL,EAAMC,MAAME,GACnBG,EAAkBN,EAAMC,MAAMM,QAAQ,MACtCC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUX,EAAMC,QAC7CI,IAASb,EACPW,EAAYG,GAAmBA,EAAkBH,GAAa,IAChEK,EAASF,GAAmBd,EAC5BgB,EAASL,GAAa,KACtB,EAAKC,SAAS,CAAEH,MAAOO,KAGrBL,EAAYG,GAAmBH,EAAYG,GAAmB,IAChEE,EAASF,GAAmBd,EAC5BgB,EAASL,GAAa,KACtB,EAAKC,SAAS,CAAEH,MAAOO,S,EAM/BI,MAAQ,WACN,EAAKR,SAAS,CAAEH,MAAOH,K,uDAGf,IAAD,OACDe,EAAQ1B,KAAKa,MAAMC,MAAMa,KAAI,SAACT,EAAMU,GAAP,OACjC,kBAAC,EAAD,CAAM1B,QAAS,kBAAM,EAAKa,KAAKa,IAAIC,IAAKD,EAAG3B,KAAMiB,EAAMpB,MAAO8B,OAEhE,OACE,kBAACtB,EAAD,KACE,kBAACG,EAAD,CAAaP,QAASF,KAAKyB,OAA3B,SAEA,kBAACjB,EAAD,CAAOL,IAAI,uBACVuB,O,GAvCwBtB,aC1Bb0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8c353628.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Img = styled.img`\n  position: absolute;\n  top: 167px;\n  left: ${(props) => props.index * 87}px;\n  cursor: pointer;\n  z-index: 10;\n`;\n\nexport default class Frog extends Component {\n  render() {\n    const { type, index, onClick } = this.props;\n    if (type === null) {\n      return null;\n    }\n    return <Img src={`img/frog_${type}.gif`} index={index} onClick={onClick} />;\n  }\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Frog from './Frog';\n\nconst frogType = {\n  green: 'green',\n  brown: 'brown',\n};\n\nconst Root = styled.div`\n  position: relative;\n  top: 0;\n  left: 0;\n`;\n\nconst Board = styled.img`\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\n\nconst ResetButton = styled.button`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 10;\n`;\n\nconst initialBoardState = [\n  frogType.green,\n  frogType.green,\n  frogType.green,\n  null,\n  frogType.brown,\n  frogType.brown,\n  frogType.brown,\n];\n\nexport default class App extends Component {\n  state = {\n    board: initialBoardState,\n  };\n\n  jump = (frogIndex) => {\n    this.setState((state) => {\n      const frog = state.board[frogIndex];\n      const emptyPlaceIndex = state.board.indexOf(null);\n      const newBoard = JSON.parse(JSON.stringify(state.board));\n      if (frog === frogType.green) {\n        if (frogIndex < emptyPlaceIndex && emptyPlaceIndex - frogIndex <= 2) {\n          newBoard[emptyPlaceIndex] = frogType.green;\n          newBoard[frogIndex] = null;\n          this.setState({ board: newBoard });\n        }\n      } else {\n        if (frogIndex > emptyPlaceIndex && frogIndex - emptyPlaceIndex <= 2) {\n          newBoard[emptyPlaceIndex] = frogType.brown;\n          newBoard[frogIndex] = null;\n          this.setState({ board: newBoard });\n        }\n      }\n    });\n  };\n\n  reset = () => {\n    this.setState({ board: initialBoardState });\n  };\n\n  render() {\n    const frogs = this.state.board.map((frog, i) => (\n      <Frog onClick={() => this.jump(i)} key={i} type={frog} index={i} />\n    ));\n    return (\n      <Root>\n        <ResetButton onClick={this.reset}>Reset</ResetButton>\n\n        <Board src=\"img/background.jpg\" />\n        {frogs}\n      </Root>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}